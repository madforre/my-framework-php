Docker

	도커는 명령어를 입력하는 도커 클라이언트와 
	백그라운드(docker daemon)로 요청을 대기중인 도커 서버로 나뉜다.

 - 기본값이 도커 서버의 소켓을 바라보고 있기 때문에 
  사용자는 의식하지 않고 마치 바로 명령을 내리는 것 같은 느낌을 받는다.
  이러한 설계가 mac이나 windows의 터미널에서 명령어를 입력했을때 
  가상 서버에 설치된 도커가 동작하는 이유입니다.

도커를 실행하는 명령어


 - 컨테이너 실행하기

	docker run [OPTIONS] IMAGE[:TAG|@DIGEST] [COMMAND] [ARG...]

 - 자주 사용하는 옵션

	-d	detached mode 흔히 말하는 백그라운드 모드
	-p	호스트와 컨테이너의 포트를 연결 (포워딩)
	-v	호스트와 컨테이너의 디렉토리를 연결 (마운트)
	-e	컨테이너 내에서 사용할 환경변수 설정
	–name	컨테이너 이름 설정
	–rm	프로세스 종료시 컨테이너 자동 제거
	-it	-i와 -t를 동시에 사용한 것으로 터미널 입력을 위한 옵션
	
Redis란?

	Remote Dictionary System의 약자로 쉽게 말하면
	인메모리 원격 캐시 서버 정도로 생각하면 된다.

	NoSQL DBMS로 분류할 수도 있고 인 메모리라는 특성 때문에
	in memory 솔루션으로 분류할 수도 있다

	* 즉 메모리를 이용하여 고속으로 <key, value> 스타일의 데이터를 저장하고
	불러올 수 있는 원격 시스템이다.

 - key 권장 사항 : 간결하면서도 중복되지 않아야 한다.
		   너무 긴 문자열은 지양하고 어쩔 수 없다면 해시(SHA1)를
		   이용해서 저장하기를 권고한다.
		   아주 작은 차이라서 가독성을 해치는 것보단 적절히 사용하는게
		   낫다.

 - Value format : string, lists, sets(중복 불가능한 리스트)
		  , sorted sets(추가로 score 저장), 
		   hashes( field 와 value를 가진 구조)

 - value 권장 사항 : hashes 하나의 key에 40억개 정도 값 저장 가능하지만,
	             성능상의 이유로 이렇게 많이 저장하면 안된다.

 - Expire 설정 : 만료시간을 정할 수 있다. (제한된 메모리를 위함)

* 가상머신에서는 성능의 한계가 있기 때문에 일반 리눅스 서버에서 설치하고
  사용하기를 권장한다.

워드프레스 컨테이너

	- 워드프레스 컨테이너 내부에는 apache2 와 php가 설치되어 있지만 
	  추상화되어 실행과정에선 드러나지 않는다.

tensorflow

	- 손쉽게 머신러닝을 할 수 있는 툴이다.

	docker run -d -p 8888:8888 -p 6006:6006 teamlab/pydata-tensorflow:0.1

	teamlab/pydata-tensorflow:0.1 이 이미지는
	numpy, scipy, pandas, jupyter, scikit-learn, gensim,
	BeautifulSoup4, Tensorflow가 설치되어 있음

-----------------------------------------------------

도커 명령어

docker ps [OPTIONS]

	docker ps : 실행중인 컨테이너 목록을 보여준다.
	docker ps -a : 종료된 컨테이너도 목록에 추가로 보여준다.

docker stop container_id - 실행중인 컨테이너 중지

docker pull image_name:version

	- 이미지 다운로드하기(pull) 

docker rmi [OPTIONS] IMAGE [IMAGE...]

	- images 명령어를 통해 얻은 이미지 목록에서 이미지 ID를 입력하면
	  삭제가 된다. 단, 컨테이너가 실행중인 이미지는 삭제되지 않는다.

	이미지는 여러개의 레이어로 구성되어 있기 때문에 모든 레이어가
	삭제된 것을 알 수 있다.


docker logs --tail 10 ${WORDPRESS_CONTAINER_ID}

	워드프레스 컨테이너 ID를 입력하면 마지막 10줄 로그 출력

docker logs -f ${WORDPRESS_CONTAINER_ID}

	실시간으로 로그 생성 확인

	컨테이너의 로그파일은 json 방식으로 어딘가에 저장이 됩니다. 
	로그가 많으면 은근히 파일이 차지하는 용량이 커지므로 주의해야합니다. 
	도커는 다양한 플러그인을 지원하여 json이 아닌 특정 로그 서비스에 
	스트림을 전달할 수 있습니다. 

	* 기본 logging driver를 사용하면 로그가 계속 쌓이게 된다.

	* 어느 정도 앱의 규모가 커지면 기본적인 방식 대신 
	  로그 서비스를 이용하는 걸 고려해야 합니다.

docker exec [OPTIONS] CONTAINER COMMAND [ARG...]

	컨테이너를 관리하다 보면 실행중인 컨테이너에 들어가보거나 
	컨테이너의 파일을 실행하고 싶을 때가 있다.
	이럴때 사용한다.

	* docker run ~ 컨테이너 실행 명령과 차이점?

		run은 새로 컨테이너를 만들어서 실행하고 
		exec는 실행중인 컨테이너에 명령어를 내린다.

	* 도커 옵션 : -it -i와 -t를 동시에 사용한 것으로 터미널 입력을 위한 옵션

		      키보드 입력이 필요하면 -it 옵션을 주도록 하자.

	굳이 복잡한 작업이 필요 없는 경우는 -it 옵션없이 단순하게 명령을
	실행하고 종료할 수 있다.

중요 - 컨테이너를 삭제한다는 건 컨테이너에서 생성된 파일이 사라진다는 것을 뜻한다.
	따라서 컨테이너 삭제시 유지해야하는 데이터는 반드시
  	컨테이너 내부가 아닌 외부 스토리지에 저장해야 한다.

	가장 좋은 방법은 AWS S3같은 클라우드 서비스이고,
	또 하나는 데이터 볼륨(Data volumes)을 컨테이너에 추가해서
	사용하는 것이다.

	데이터 볼륨을 사용하면 해당 디렉토리는 컨테이너와 별도로 저장되고
	컨테이너를 삭제해도 데이터가 지워지지 않는다.

- ':' 는 호스트와 컨테이너 간의 맵핑을 의미하는거 같은데 
  연결해주는 역할인 듯 하다.

	ex) 3306:3306
	
* 아래 명령어처럼 호스트의 디렉토리를 볼륨으로 사용하면
  컨테이너를 삭제해도 데이터는 사라지지 않는다!
  다시 컨테이너를 실행할 때 동일한 디렉토리를 마운트 한다면
  그대로 데이터를 사용할 수 있다.
	
	docker run -d -p 3306:3306 \
	  -e MYSQL_ALLOW_EMPTY_PASSWORD=true \
	  --name mysql \
	  -v /my/own/datadir:/var/lib/mysql \ # 볼륨 마운트하는 부분
	 mysql:5.7
